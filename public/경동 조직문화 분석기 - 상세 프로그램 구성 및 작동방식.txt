경동 조직문화 분석기 - 상세 프로그램 구성 및 작동방식

  🎯 프로그램 개요

  경동 조직문화 분석기는 다중 팀 워크숍 환경에서 조직문화를 분석하고 시각화하는 실시간 협업 웹 
  애플리케이션입니다.

  ---
  🏗️ 시스템 아키텍처

  전체 구조

  경동 조직문화 분석기/
  ├── backend/          # FastAPI 백엔드 서버
  ├── frontend/         # React + Vite 프론트엔드
  ├── uploads/          # 데이터 저장소
  ├── public/           # 정적 자산
  └── 실행 스크립트들    # run-dev.bat, start-app.bat 등

  네트워크 구성 ⭐ (최근 개선)

  - 백엔드: 0.0.0.0:65432 (모든 네트워크 인터페이스)
  - 프론트엔드: localhost:3333 (Vite 개발 서버)
  - 동적 IP 감지: 네트워크 변경 시 자동 적응
  - WiFi 이동 대응: 강의실 간 이동 시에도 정상 작동

  ---
  🖥️ 백엔드 아키텍처 (FastAPI)

● 핵심 모듈 구성

  1. app.py - 메인 API 서버

  - FastAPI 애플리케이션: CORS 설정, 라우터 관리
  - 정적 파일 서빙: 프론트엔드 빌드 파일 제공
  - 네트워크 정보 API: 동적 IP 감지 엔드포인트

  2. modules/session_manager.py - 세션 관리 시스템 ⭐

  # 주요 기능
  - create_session(): 6자리 세션 코드 생성 (예: AT716F)
  - join_session(): 세션 참가 및 참가자 수 증가
  - leave_session(): 세션 나가기 및 빈 세션 자동 정리
  - 파일 기반 저장: uploads/sessions/
  - 무제한 참가자 지원 (현재 제한 없음)

  3. modules/prompt_generator.py - 프롬프트 생성

  - 동암정신 메타데이터: JSON 기반 조직문화 데이터
  - 한국어 프롬프트 자동생성: LLM 입력용 구조화된 텍스트
  - 메모리 캐싱: TTL 60초, 성능 최적화

  4. modules/realtime_sync.py - 실시간 동기화 ⭐

  # 핵심 메커니즘
  - 필드별 락킹 시스템 (동시 편집 방지)
  - 폴링 기반 업데이트 (WebSocket 대신)
  - 사용자 ID 기반 충돌 해결
  - 30초 TTL 자동 해제

  5. modules/artifact_store.py - 산출물 저장소

  - 파일 기반 저장: JSON + 바이너리 파일 관리
  - CRUD API: 생성/조회/수정/삭제
  - 팀별 필터링: 조직 단위 데이터 관리

  ---
  🎨 프론트엔드 아키텍처 (React + Vite)

  주요 컴포넌트 구성

  1. SessionManager.jsx - 세션 관리 UI ⭐

  // 핵심 기능
  - 세션 생성/참가 인터페이스
  - QR코드 생성 (Google Charts API)
  - 동적 API URL 사용 (networkUtils)
  - 로컬 스토리지 세션 정보 저장

  2. Dashboard.jsx - 메인 대시보드

  - 조직문화 분석 워크플로우: 입력 → 생성 → 분석
  - 팀/조 관리: 다중 팀 동시 작업 지원
  - 산출물 저장: 프롬프트 및 결과 아카이빙

  3. Visualizer.jsx - 데이터 시각화

  - 문화지도 렌더링: 배경 이미지 + 좌표 기반 점 표시
  - 레버 활성화 시각화: JSON 데이터 → 시각적 표현
  - 베이스라인 비교: 기준점 대비 변화 추적

  4. RealtimeInput.jsx - 실시간 입력 컴포넌트 ⭐

  // 동시편집 방지 메커니즘
  - 포커스 시 필드 락킹
  - 실시간 상태 폴링 (500ms 간격)
  - 충돌 감지 및 사용자 알림
  - 자동 락 해제 (30초 TTL)

  유틸리티 모듈

  utils/networkUtils.js - 동적 네트워크 관리 ⭐

  // 주요 기능
  - getNetworkInfo(): 현재 네트워크 IP 자동 감지
  - 30초 캐싱으로 성능 최적화
  - WiFi 변경 시 자동 적응
  - 폴백 메커니즘 (localhost)

  hooks/useSession.js - 세션 상태 관리

  - 브라우저 종료 감지: beforeunload 이벤트
  - 자동 세션 정리: navigator.sendBeacon
  - 로컬 상태 복원: 새로고침 대응

  hooks/useRealtimeSync.js - 실시간 동기화 훅

  - 폴링 기반 업데이트: REST API 기반
  - 필드 상태 관리: 락/언락 상태 추적
  - 충돌 해결: 사용자별 우선순위

  ---
  📊 데이터 플로우 분석

● 1. 세션 생성 플로우

  사용자 → SessionManager → POST /api/sessions → session_manager.py
                                                        ↓
                                            6자리 코드 생성 (AT716F)
                                                        ↓
                                            uploads/sessions/ 저장
                                                        ↓
                                            QR코드 + URL 생성 ← 사용자

  2. 협업 워크플로우 ⭐

  참가자 A: 필드 클릭 → 락 요청 → POST /api/fields/{session}/lock
                                          ↓
  참가자 B: 같은 필드 접근 → 폴링 → GET /api/fields/{session}/updates
                                          ↓
                                    "필드가 사용 중" 알림 표시
                                          ↓
  참가자 A: 편집 완료 → 언락 → POST /api/fields/{session}/unlock
                                          ↓
  참가자 B: 다음 폴링에서 필드 사용 가능 확인

  3. 실시간 동기화 메커니즘

  프론트엔드 (500ms 간격):
  useRealtimeSync → GET /api/fields/{session}/updates?since={timestamp}
                                  ↓
  백엔드 응답: { updates: [...], timestamp: 1234567890 }
                                  ↓
  상태 업데이트 → UI 반영 (락 표시, 값 변경 등)

  4. 데이터 저장 구조

  uploads/
  ├── sessions/           # 세션 데이터
  │   ├── sessions_index.json
  │   └── {SESSION_CODE}/
  │       ├── meta.json   # 세션 정보
  │       └── artifacts/  # 세션 산출물
  ├── workshop/           # 일반 산출물 (레거시)
  └── realtime/          # 실시간 동기화 상태
      └── fields_{SESSION_CODE}.json

  ---
  ⚙️ 주요 기능 리스트

● 🎪 워크숍 관리 기능

  - ✅ 다중 세션 지원: 여러 팀이 동시에 독립적인 세션 운영
  - ✅ QR코드 생성: 모바일 접속을 위한 자동 QR코드
  - ✅ 세션 코드 관리: 6자리 대문자+숫자 조합 (예: AT716F)
  - ✅ 참가자 수 추적: 실시간 참가자 카운팅

  🤝 실시간 협업 기능 ⭐

  - ✅ 동시편집 방지: 필드별 락킹 시스템
  - ✅ 실시간 상태 동기화: 500ms 폴링 기반
  - ✅ 사용자별 충돌 해결: 고유 ID 기반 우선순위
  - ✅ 자동 락 해제: 30초 TTL로 데드락 방지

  🧠 조직문화 분석 기능

  - ✅ 동암정신 메타데이터: 조직문화 요소 체계화
  - ✅ 한국어 프롬프트 생성: LLM 최적화된 구조화 텍스트
  - ✅ 시각화 엔진: 문화지도 + 좌표 기반 레버 표시
  - ✅ 베이스라인 비교: 기준점 대비 변화량 측정

  💾 데이터 관리 기능

  - ✅ 파일 기반 저장소: JSON + 바이너리 파일 하이브리드
  - ✅ 팀별 데이터 분리: 조직 단위 데이터 격리
  - ✅ 산출물 아카이빙: 프롬프트/결과 영구 보존
  - ✅ 자동 세션 정리: 빈 세션 자동 삭제

  🌐 네트워크 적응 기능 ⭐ (최근 추가)

  - ✅ 동적 IP 감지: 네트워크 변경 자동 탐지
  - ✅ WiFi 이동 대응: 강의실 간 이동 시 자동 재연결
  - ✅ 폴백 메커니즘: 연결 실패 시 localhost로 전환
  - ✅ 30초 캐싱: 네트워크 정보 효율적 관리

  ---
  🚀 성능 특성

  동시 사용자 지원

  - 추천 사용자: 30-40명 (안정적)
  - 최대 이론값: 200-500명 (하드웨어 기준)
  - 네트워크 제한: WiFi 품질에 따라 50-100명
  - 실시간 동기화: 폴링 방식으로 30-50명 현실적

  리소스 사용량

  - 메모리: 캐싱 + 세션 상태 (경량)
  - CPU: 폴링 처리 + JSON 파싱 (중간)
  - 디스크: 파일 기반 저장소 (선형 증가)
  - 네트워크: 500ms 폴링 + API 호출 (적당)

  ---
  📋 운영 체크리스트

  사전 준비

  - ✅ 네트워크 환경 점검 (WiFi 안정성)
  - ✅ 포트 접근성 확인 (65432, 3333)
  - ✅ 백엔드 헬스체크: http://현재IP:65432/healthz
  - ✅ 정적 자산 존재 확인 (이미지 파일들)

  실행 방법

  # 개발/테스트 환경
  ./run-dev.bat

  # 워크숍 운영 환경
  ./start-app.bat

  문제 해결

  - 포트 충돌: 기존 프로세스 종료 후 재실행
  - 네트워크 변경: 브라우저 새로고침으로 IP 재감지
  - 세션 오류: uploads/sessions/ 권한 확인
  - 동시편집 문제: 30초 후 자동 락 해제

● ---
  🎯 핵심 혁신 포인트

  1. 동적 네트워크 적응 ⭐

  - 기존: IP 하드코딩으로 네트워크 변경 시 오류
  - 개선: 자동 IP 감지로 강의실 이동 시에도 정상 작동

  2. 실시간 협업 시스템 ⭐

  - 기존: 단순 개별 작업
  - 개선: 필드별 락킹으로 동시편집 충돌 방지

  3. 세션 기반 격리

  - 기존: 전역 공유 데이터
  - 개선: 팀별 독립적인 세션 환경

  4. 폴링 기반 동기화

  - WebSocket 대신 REST API 폴링 선택
  - 네트워크 환경에 덜 민감하고 구현 단순화

  ---
  본 프로그램은 강의실 환경에서의 다중 팀 협업을 위해 최적화된 실시간 조직문화 분석 도구입니다. 네트워크 적응성과    
   동시편집 안정성에 중점을 두어 워크숍 환경에서 안정적으로 운영될 수 있도록 설계되었습니다.

____
경동 조직문화 분석기 - 수정된 프로그램 구성 및 작동방식

  🎯 현재 실제 구성 (카드뷰 중심)

  시각화 방식 변경사항 ⭐

  - 기존: 문화지도(Culture Map) 좌표 기반 시각화
  - 현재: 카드뷰(Card View) 형태의 구조화된 분석 결과 표시

  ---
  🎨 현재 활성 시각화 컴포넌트

  1. ContributionCardView.jsx ⭐ (메인 시각화)

  // 핵심 기능
  - Change Agent/팀장활동 구현 기여 영역 분석
  - 카드 형태의 구조화된 데이터 표시
  - bulwoojai-culture-map.json 데이터 기반
  - sample-contribution-data.json 샘플 데이터 활용

  2. WebNativeVisualizer.jsx (보조 시각화)

  // 추가 시각화 요소
  - 웹 네이티브 형태의 시각적 표현
  - 경량화된 시각화 컴포넌트
  - Dashboard와 통합된 인터페이스

  3. 비활성화된 컴포넌트들

  - Visualizer.jsx - 기존 좌표 기반 문화지도 (사용 안함)
  - CultureMapFourLayer.jsx - 4레이어 문화지도 (사용 안함)
  - BulwoojaiMapDemo.jsx - 불우재 맵 데모 (사용 안함)
  - CausalMap.jsx - 인과관계 맵 (사용 안함)

  ---
  📊 수정된 데이터 플로우

  카드뷰 기반 분석 플로우 ⭐

  사용자 입력 → 프롬프트 생성 → LLM 분석 → JSON 결과
                                                      ↓
                                          구조화된 분석 데이터
                                                      ↓
                              ContributionCardView → 카드 형태 시각화
                                                      ↓
                                          영향받은 요소별 카드 표시

  데이터 구조

  // bulwoojai-culture-map.json
  {
    "layers": [...],
    "elements": [...],
    "contribution_areas": [...] // 기여 영역 정의
  }

  // sample-contribution-data.json
  {
    "contributions": [...], // 기여도 데이터
    "analysis_results": [...] // 분석 결과
  }

  ---
  🔧 수정된 주요 기능

  ❌ 제거된 기능들

  - 문화지도 좌표 기반 시각화
  - 레버 위치 표시
  - 베이스라인 비교 (좌표 기반)
  - 이미지 배경 위 점 표시

  ✅ 현재 활성 기능들

  - 카드뷰 시각화: 구조화된 분석 결과 표시
  - 기여 영역 분석: Change Agent/팀장활동 중심
  - 다운로드 기능: PNG 이미지, WORD 문서 내보내기
  - 실시간 협업: 세션 기반 동시편집
  - 동적 네트워크: WiFi 환경 자동 적응

  ---
  📋 업데이트된 운영 체크리스트

  시각화 관련 체크사항 (수정됨)

  - ✅ 카드뷰 데이터: bulwoojai-culture-map.json 존재 확인
  - ✅ 샘플 데이터: sample-contribution-data.json 유효성
  - ❌ 이미지 자산 확인 (더 이상 필요 없음)
  - ❌ 좌표 데이터 검증 (더 이상 필요 없음)

  핵심 검증 포인트

  # 백엔드 헬스체크
  curl http://현재IP:65432/healthz

  # 프론트엔드 접속
  http://localhost:3333/

  # 카드뷰 정상 표시 확인
  - ContributionCardView 컴포넌트 렌더링
  - 분석 결과 카드 형태 표시
  - 다운로드 기능 작동

  ---
  🎯 수정된 핵심 혁신 포인트

  1. 시각화 방식 전환 ⭐

  - 기존: 복잡한 좌표 기반 문화지도
  - 현재: 직관적인 카드뷰 기반 분석 결과

  2. 실용성 중심 설계

  - 기존: 시각적 임팩트 중심
  - 현재: 분석 내용의 명확한 전달 중심

  3. 유지보수성 향상

  - 기존: 복잡한 좌표 시스템 관리
  - 현재: 단순한 카드 기반 데이터 구조

  ---
  정리하자면, 현재 버전은 복잡한 문화지도 시각화를 제거하고 카드뷰 형태의 구조화된 분석 결과 표시에 집중한 
  실용적인 버전으로 진화했습니다. 이는 워크숍 환경에서의 사용성과 이해도를 크게 향상시켰습니다.
